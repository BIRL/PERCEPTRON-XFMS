%Last updated 202212072214
% Excel File reformatting
% Removed code: (i) individual file matching
% Limitations: Overall increase in computation time due to the excel file formatting (specifically for transpose part)

%Last updated 202212011650
% [RESOLVED] Bug - Truncation was not properly done.
% 

%%%For matching MZs & RTs of Mascot and Mass Hunter data files
%Mascot values be fetched from mascot file
%Mass Hunter data values will be fetched from csv file (generated by .d folder to mzXML and then csv file)

%This Code is compatible with MATLAB R2022a or higher
clc;
clear all;
disp("This Code is compatible with MATLAB R2022a or later.");

tic;

%For MZ
FactorForMz = 10^-2;      % Updated 202211222028
MatchToleranceForMz = FactorForMz;          % 0.0001;  % Updated 202211221613
MisMatchToleranceForMz = FactorForMz * 9;   % 0.0009;   % Updated 202211221613
OffTargetToleranceForMz = 1;

%For RT
FactorForRT = 10^-2;     
MatchToleranceForRT = FactorForRT;
MisMatchToleranceForRT = FactorForRT * 9; 
OffTargetToleranceForRT =  1;

TempDateAndTime = string(datetime('now','TimeZone','local','Format','yyyyMMddHHmmss'));
SubResultFolder = TempDateAndTime + "_Results_MZTol_" + FactorForMz + "_RTTol_" + FactorForRT;

mkdir(fullfile(pwd,"Results"));
MainResultFolder = pwd + "\Results\";
ResultsPath =  MainResultFolder + SubResultFolder + "\"; % TempDateAndTime + "_Results" + "\";       % Updated 202211221641
mkdir(fullfile(MainResultFolder,SubResultFolder));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
EnableSheet1Transpose = true; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%Reading Mass Hunter File
[MassHunterFileName, MassHunterFilePath] = uigetfile({'*.csv'}, 'Select Mass Hunter File');   % Updated 202211221622
MassHunterData = readmatrix(string(MassHunterFilePath) + string(MassHunterFileName));   % 'CheY_100.csv'     % Updated 202211221622

%Reading mascot file
[MascotFileName, MascotFilePath] = uigetfile({'*.xlsx'}, 'Select Mascot File');   % Updated 202211221622
[~,~,MascotFile] = xlsread(string(MascotFilePath) + string(MascotFileName));    %xlsread('3ChY_MASCOT_File.xlsx');       % Updated 202211221622


%string([MascotFile(2:end,14), extractBetween(MascotFile(2:end,27), 'at ', ' mins ')])

% Preparing Mascot Data
% mz value |||| RT value (in Mins)
MascotData = [double(string((MascotFile(2:end,14)))), double(string(extractBetween(MascotFile(2:end,27), 'at ', ' mins ')))];
UniqueMascotData = unique(MascotData, 'rows');
MascotDataSorted = sortrows(UniqueMascotData,[1,2], 'ascend');


% Preparing Mass Hunter Data
MassHunterMZs = double(string((MassHunterData(2:end,2))));             % Mzs 
MassHunterRTsecs = double(string((MassHunterData(2:end,1))));          % RTs in seconds 
MassHunterRTmins = double(string((MassHunterData(2:end,1)))) ./ 60;    % RTs in minutes
MassHunterInts = double(string((MassHunterData(2:end,3))));            % Intensities

% mz value |||| RT value (in Mins) |||| Intensity
MassHunterData = [MassHunterMZs, MassHunterRTmins, MassHunterInts];
MassHunterDataSorted = sortrows(MassHunterData,[1,2], 'ascend');

%Size of sorted Matrices
sizeOfMassHunterData = size(MassHunterDataSorted,1);
sizeOfMascotData = size(MascotDataSorted,1);


%%%Excel File Formatted Results
Results = "Results.xlsx";

ResultSheet1 = "ResultSheet1.csv";
ResultSheet2 = "ResultSheet2.csv";
ResultSheet3 = "ResultSheet3.csv";
ResultSheet4 = "ResultSheet2_WithoutTranspose.csv";

DataResultSheet3 = [];

%%%Excel File Formatted Results

%%%Sheet 1
FormattingHeaderSheet1 = ["Unique RT (mins)", "Difference (RT)"];
writematrix(FormattingHeaderSheet1, ResultsPath + ResultSheet1, 'WriteMode','append');  % NeedToDel
writematrix(FormattingHeaderSheet1, ResultsPath + Results, 'WriteMode','append');  % Data will be appended into sheet 1

%%%Sheet 2

if (EnableSheet1Transpose)
    FormattingHeaderSheet2 = ["Unique RT (mins)"; "Difference (RT)"; "MASCOT Mzs"]
    writematrix(FormattingHeaderSheet2, ResultsPath + Results, 'Sheet', 2, 'Range', 'A1');
end


progressbar('Processing...');
for i=1:sizeOfMascotData

    DataResultSheet1 = [];
    MZVector = [];
    
    progressbar(i/sizeOfMascotData);
    for j=1:sizeOfMassHunterData
        MatchDiffMz = MascotDataSorted(i,1) - MassHunterDataSorted(j,1);
        AbsMatchDiffMz = fix ( abs(MatchDiffMz) / FactorForMz ) * FactorForMz;     % Bug Fixed 202212011650
        
        if(AbsMatchDiffMz >= OffTargetToleranceForMz)
            continue;
        end

        MatchDiffRT = MascotDataSorted(i,2) - MassHunterDataSorted(j,2);
        AbsMatchDiffRT = fix ( abs(MatchDiffRT) / FactorForRT ) * FactorForRT;      % Bug Fixed 202212011650

        if(AbsMatchDiffRT >= OffTargetToleranceForRT)
            continue;
        end
        
        % Checking Match & RT
        if (AbsMatchDiffMz <= MatchToleranceForMz && AbsMatchDiffRT <= MatchToleranceForRT)

            if size(DataResultSheet1,1) == 0
                DataResultSheet1 = [DataResultSheet1; MascotDataSorted(i,2), MatchDiffRT];
                MZVector = [MZVector; MascotDataSorted(i,1)];   %% MIGHT NEEDED IN FUTURE
            else
                DataResultSheet1 = [DataResultSheet1, MatchDiffRT];
                MZVector = [MZVector, MascotDataSorted(i,1)];   %% MIGHT NEEDED IN FUTURE
            end
        end
    end
    MatchCount = size(DataResultSheet1,1);
    if MatchCount ~= 0

        writematrix(DataResultSheet1, ResultsPath + ResultSheet1, 'WriteMode','append');  % NeedToDel
        writematrix(DataResultSheet1, ResultsPath + Results, 'WriteMode','append');   % Data will be appended into sheet 1


        writematrix([DataResultSheet1; "", MZVector], ResultsPath + ResultSheet4, 'WriteMode','append');  %%Just for Testing


        if (EnableSheet1Transpose)
            NewCellPos = EmptyColPos(ResultsPath+Results, 2);
            writematrix([DataResultSheet1; "", MZVector]', ResultsPath + Results, 'Sheet', 2, 'Range', NewCellPos);
        end
    else
        DataResultSheet3 = [DataResultSheet3; MascotDataSorted(i,2)];
    end
end



%%%Excel File Formatted Results
%%% Below Uncomment when MZ needed
% FormattingHeaderSheet1 = ["Unique MASCOT (mz)", "Difference (mz)"];
% FormattingHeaderSheet2 = ["Unique MASCOT (mz)", "Difference (mz)", "MASCOT RT (mins)"];


FormattingHeaderSheet3 = ["Unique Unmatched RT (mins)"];

if size(DataResultSheet3,1) == 0
    DataResultSheet3 = ["Unmatched RTs (mins) not found."];
end
writematrix([FormattingHeaderSheet3; DataResultSheet3], ResultsPath + ResultSheet3, 'WriteMode','append');  % NeedToDel

if (EnableSheet1Transpose)
    writematrix(["Unique Unmatched RT (mins)"; DataResultSheet3], ResultsPath + Results, 'Sheet', 3, 'Range', 'A1');
else
    writematrix(["Unique Unmatched MRT (mins)"; DataResultSheet3], ResultsPath + Results, 'Sheet', 2, 'Range', 'A1');
end

% writematrix([FormattingHeaderSheet2; DataResultSheet1n2], ResultsPath + ResultSheet4, 'WriteMode','append');

toc;


function NewCellPos = EmptyColPos(ExcelFilePath, ExcelSheet)
Matrix = readmatrix(ExcelFilePath,'Sheet',ExcelSheet);
NewColNum = size(Matrix,2) + 1;
NewCellPos = [char(xlsColNum2Str(NewColNum)) , '1'] ;
end


