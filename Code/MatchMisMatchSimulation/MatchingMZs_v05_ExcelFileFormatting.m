%Last updated 202212011650
% [RESOLVED] Bug - Truncation was not properly done.
% 

%%%For matching mz values of Mascot and Mass Hunter data
%Mascot values be fetched from mascot file
%Mass Hunter data values will be fetched from csv file (generated by .d folder to mzXML and then csv file)

%This Code is compatible with MATLAB R2022a or higher
clc;
clear all;
disp("This Code is compatible with MATLAB R2022a or higher.");
%setwd('C:\Users\Maham\Dropbox\SpecOxi\NAR-WebServer\DataConversion\R\CheY')
tic;

Factor = 10^-2;      % Updated 202211222028
MatchTolerance = Factor;          % 0.0001;  % Updated 202211221613
MisMatchTolerance = Factor * 9;   % 0.0009;   % Updated 202211221613
OffTargetTolerance = 1;

TempDateAndTime = string(datetime('now','TimeZone','local','Format','yyyyMMddHHmmss'));
SubResultFolder = TempDateAndTime + "_Results_MZTol_" + Factor;

mkdir(fullfile(pwd,"Results"));
MainResultFolder = pwd + "\Results\";
ResultsPath =  MainResultFolder + SubResultFolder + "\"; % TempDateAndTime + "_Results" + "\";       % Updated 202211221641
mkdir(fullfile(MainResultFolder,SubResultFolder));

%Reading Mass Hunter File
[MassHunterFileName, MassHunterFilePath] = uigetfile({'*.csv'}, 'Select Mass Hunter File');   % Updated 202211221622
MassHunterData = readmatrix(string(MassHunterFilePath) + string(MassHunterFileName));   % 'CheY_100.csv'     % Updated 202211221622
%colNames = {'RT_sec','m/z','Int','RT_min'};

%Reading mascot file
[MascotFileName, MascotFilePath] = uigetfile({'*.xlsx'}, 'Select Mascot File');   % Updated 202211221622
[~,~,MascotFile] = xlsread(string(MascotFilePath) + string(MascotFileName));    %xlsread('3ChY_MASCOT_File.xlsx');       % Updated 202211221622
Unique_Mascot_mz = double(unique(string(MascotFile(2:end,14))));

%Sorting Mass Hunter and Mascot Values
sortMassHunterData = sortrows(MassHunterData,2, 'ascend');
sortMascotData = sortrows(Unique_Mascot_mz,1, 'ascend');

%Size of sorted Matrices
sizeOfMassHunterData = size(sortMassHunterData,1);
sizeOfMascotData = size(sortMascotData,1);
NoOfRows = sizeOfMassHunterData * sizeOfMascotData;


% Need to check
% % % %Initializing Matrices
% % % ResultantMatrixMatches = strings(NoOfRows, 3);
% % % ResultantMatrixMisMatches = strings(NoOfRows, 3);


MatchIndex = 1;
MisMatchIndex = 1;

CombinedResultsMatchFile = "CombinedMatchResults.csv";
CombinedResultsMisMatchFile = "CombinedMisMatchResults.csv";

%%%Excel File Formatted Results
ResultSheet1 = "ResultSheet1.csv";
ResultSheet2 = "ResultSheet2.csv";
ResultSheet3 = "ResultSheet3.csv";
ResultSheet4 = "ResultSheet2_WithoutTranspose.csv";

DataResultSheet1n2 = [];
DataResultSheet3 = [];
%%%Excel File Formatted Results


%Summarizing Data for Combined Matches File
MatchMzsWithCount = [];
NoMatchMzsFoundWithCount = [];

%Summarizing Data for Combined MisMatches File
MisMatchMzsWithCount = [];
NoMisMatchMzsFoundWithCount = [];

progressbar('Processing...');
for i=1:sizeOfMascotData
    
    TempMatch = [];
    TempMisMatch = [];
    
    progressbar(i/sizeOfMascotData);
    for j=1:sizeOfMassHunterData
        MatchDiff = sortMascotData(i,1) - sortMassHunterData(j,2);
        
        AbsMatchDiff = fix ( abs(MatchDiff) / Factor ) * Factor;     % Bug Fixed 202212011650
        
        if(AbsMatchDiff >= OffTargetTolerance)
            continue;
        end
        
        
        if AbsMatchDiff <= MatchTolerance  %Match
            TempMatch = [TempMatch; sortMascotData(i,1), sortMassHunterData(j,2), MatchDiff];

            DataResultSheet1n2 = [DataResultSheet1n2; sortMascotData(i,1), MatchDiff, sortMassHunterData(j,4)];

        elseif (MatchTolerance < AbsMatchDiff && AbsMatchDiff < MisMatchTolerance)  %MisMatch
            TempMisMatch = [TempMisMatch; sortMascotData(i,1), sortMassHunterData(j,2), MatchDiff];

        end
    end
    MatchCount = size(TempMatch,1);
    MisMatchCount = size(TempMisMatch,1);
    TempMainMatchMatrix = [];
    if MatchCount ~= 0
        
        %%%% For Temp File Testing "TempMatch"
        TempMainMatchMatrix = string([sortMascotData(i,1), MatchCount, "";"Mascot_mz", "MassHunter_mz", "Difference"]);
        TempMainMatchMatrix = [ TempMainMatchMatrix; string(TempMatch); "","",""];
        writematrix(TempMainMatchMatrix, ResultsPath + sortMascotData(i,1) +"_Match.csv");
        MatchMzsWithCount = [MatchMzsWithCount; sortMascotData(i,1), MatchCount];

    else
        TempMainMatchMatrix = string([sortMascotData(i,1), MatchCount, "";"Mascot_mz", "MassHunter_mz", "Difference"]);
        TempMainMatchMatrix = [ TempMainMatchMatrix; "No match found", "", ""; "","",""];
        writematrix(TempMainMatchMatrix, ResultsPath + sortMascotData(i,1) +"_Match.csv");
        
        NoMatchMzsFoundWithCount = [NoMatchMzsFoundWithCount; sortMascotData(i,1), MatchCount];

        DataResultSheet3 = [DataResultSheet3; sortMascotData(i,1)];
        
    end
    writematrix(TempMainMatchMatrix, ResultsPath + CombinedResultsMatchFile, 'WriteMode','append');

    TempMainMisMatchMatrix = [];
    if MisMatchCount ~= 0

        %%%% For Temp File Testing "TempMisMatch"
        TempMainMisMatchMatrix = string([sortMascotData(i,1), MisMatchCount, ""; "Mascot_mz", "MassHunter_mz", "Difference"]);
        TempMainMisMatchMatrix = [TempMainMisMatchMatrix; string(TempMisMatch); "","",""];
        writematrix(TempMainMisMatchMatrix, ResultsPath + sortMascotData(i,1)+"_MisMatch.csv");
        MisMatchMzsWithCount = [MisMatchMzsWithCount; sortMascotData(i,1), MisMatchCount];

    else
        TempMainMisMatchMatrix = string([sortMascotData(i,1), MisMatchCount, ""; "Mascot_mz", "MassHunter_mz", "Difference"]);
        TempMainMisMatchMatrix = [TempMainMisMatchMatrix; "No mismatch found", "", ""; "","",""];
        writematrix(TempMainMisMatchMatrix, ResultsPath + sortMascotData(i,1)+"_MisMatch.csv");
        NoMisMatchMzsFoundWithCount = [NoMisMatchMzsFoundWithCount; sortMascotData(i,1), MisMatchCount];
    end
    writematrix(TempMainMisMatchMatrix, ResultsPath + CombinedResultsMisMatchFile, 'WriteMode','append');

end

SummarizingMatchData = ["",""; "Summarizing Match Data", "" ;"Matched Mzs", "Count"; MatchMzsWithCount; "","" ; "No Matched Mzs Found", "Count"; NoMatchMzsFoundWithCount];
writematrix(SummarizingMatchData, ResultsPath + CombinedResultsMatchFile, 'WriteMode','append');


SummarizingMisMatchData = ["","" ; "Summarizing Mismatch Data", "" ;"Mismatched Mzs", "Count"; MisMatchMzsWithCount; "","" ; "No Mismatched Mzs Found", "Count"; NoMisMatchMzsFoundWithCount];
writematrix(SummarizingMisMatchData, ResultsPath + CombinedResultsMisMatchFile, 'WriteMode','append');


%%%Excel File Formatted Results
FormattingHeaderSheet1 = ["Unique MASCOT (mz)", "Difference (mz)"];
DataResultSheet1Prep = DataResultSheet1n2(:,[1,2]);
writematrix([FormattingHeaderSheet1; DataResultSheet1Prep], ResultsPath + ResultSheet1, 'WriteMode','append');

FormattingHeaderSheet2 = ["Unique MASCOT (mz)", "Difference (mz)", "MASCOT RT (mins)"];
DataResultSheet2Prep = DataResultSheet1n2';
writematrix([FormattingHeaderSheet2', DataResultSheet2Prep], ResultsPath + ResultSheet2, 'WriteMode','append');

FormattingHeaderSheet3 = ["Unique Unmatched MASCOT (mz)"];

if size(DataResultSheet3,1) == 0
    DataResultSheet3 = ["No unmatched MZs found."];
end
writematrix([FormattingHeaderSheet3; DataResultSheet3], ResultsPath + ResultSheet3, 'WriteMode','append');

writematrix([FormattingHeaderSheet2; DataResultSheet1n2], ResultsPath + ResultSheet4, 'WriteMode','append');

toc;