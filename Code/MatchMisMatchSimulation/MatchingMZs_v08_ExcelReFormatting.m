%Last updated 202212072214
% Excel File reformatting
% Removed code: (i) individual file matching
% Limitations: Overall increase in computation time due to the excel file formatting (specifically for transpose part)

%Last updated 202212011650
% We want CSV File based on formatting
% MASCOT (mz), MASCOT (RT), Difference m/z, Mass Hunter m/z, Mass Hunter (RT), Mass Hunter (Int)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Last updated 202212011650
% [RESOLVED] Bug - Truncation was not properly done.
% 

%%%For matching mz values of Mascot and Mass Hunter data
%Mascot values be fetched from mascot file
%Mass Hunter data values will be fetched from csv file (generated by .d folder to mzXML and then csv file)

%This Code is compatible with MATLAB R2022a or higher
clc;
clear all;
disp("This Code is compatible with MATLAB R2022a or later.");
%setwd('C:\Users\Maham\Dropbox\SpecOxi\NAR-WebServer\DataConversion\R\CheY')
tic;

Factor = 10^-2;      % Updated 202211222028
MatchTolerance = Factor;          % 0.0001;  % Updated 202211221613
MisMatchTolerance = Factor * 9;   % 0.0009;   % Updated 202211221613
OffTargetTolerance = 1;

TempDateAndTime = string(datetime('now','TimeZone','local','Format','yyyyMMddHHmmss'));
SubResultFolder = TempDateAndTime + "_Results_MZTol_" + Factor;

mkdir(fullfile(pwd,"Results"));
MainResultFolder = pwd + "\Results\";
ResultsPath =  MainResultFolder + SubResultFolder + "\"; % TempDateAndTime + "_Results" + "\";       % Updated 202211221641
mkdir(fullfile(MainResultFolder,SubResultFolder));

EnableSheet1Transpose = true;


%Reading Mass Hunter File
[MassHunterFileName, MassHunterFilePath] = uigetfile({'*.csv'}, 'Select Mass Hunter File');   % Updated 202211221622
MassHunterData = readmatrix(string(MassHunterFilePath) + string(MassHunterFileName));   % 'CheY_100.csv'     % Updated 202211221622
%colNames = {'RT_sec','m/z','Int','RT_min'};

%Reading mascot file
[MascotFileName, MascotFilePath] = uigetfile({'*.xlsx'}, 'Select Mascot File');   % Updated 202211221622
[~,~,MascotFile] = xlsread(string(MascotFilePath) + string(MascotFileName));    %xlsread('3ChY_MASCOT_File.xlsx');       % Updated 202211221622


MascotData = [double(string((MascotFile(2:end,14)))), double(string(extractBetween(MascotFile(2:end,27), 'at ', ' mins ')))];
UniqueMascotData = unique(MascotData, 'rows');
MascotDataSorted = sortrows(UniqueMascotData,[1,2], 'ascend');

%Sorting Mass Hunter and Mascot Values
MassHunterDataSorted = sortrows(MassHunterData,2, 'ascend');

%Size of sorted Matrices
sizeOfMassHunterData = size(MassHunterDataSorted,1);
sizeOfMascotData = size(MascotDataSorted,1);
NoOfRows = sizeOfMassHunterData * sizeOfMascotData;

%%%Excel File Formatted Results

Results = "Results.xlsx";

ResultSheet1 = "ResultSheet1.csv";
ResultSheet2 = "ResultSheet2.csv";
ResultSheet3 = "ResultSheet3.csv";
ResultSheet4 = "ResultSheet2_WithoutTranspose.csv";
UpdatedCSVFileName = "UpdatedCSVFile.csv";

DataResultSheet1n2 = [];
DataResultSheet2 = [];
DataResultSheet3 = [];

%%%Excel File Formatted Results
FormattingHeaderNewCSV = ["MASCOT (mz)" , "MASCOT RT (min)", "Difference m/z", "Mass Hunter m/z", "Mass Hunter RT (min)", "Mass Hunter Int"];
writematrix(FormattingHeaderNewCSV, ResultsPath + UpdatedCSVFileName, 'WriteMode','append');


%%%Sheet 1
FormattingHeaderSheet1 = ["Unique MASCOT (mz)", "Difference (mz)"];
writematrix(FormattingHeaderSheet1, ResultsPath + ResultSheet1, 'WriteMode','append');  % NeedToDel
writematrix(FormattingHeaderSheet1, ResultsPath + Results, 'WriteMode','append');  % Data will be appended into sheet 1

%%%Sheet 2

if (EnableSheet1Transpose)
    FormattingHeaderSheet2 = ["Unique MASCOT (mz)"; "Difference (mz)"; "MASCOT RT (mins)"];
    writematrix(FormattingHeaderSheet2, ResultsPath + Results, 'Sheet', 2, 'Range', 'A1');
end


% FormattingHeaderSheet2 = ["Unique MASCOT (mz)", "Difference (mz)", "MASCOT RT (mins)"];
% writematrix(FormattingHeaderSheet2', ResultsPath + ResultSheet2, 'WriteMode','append');


progressbar('Processing...');
for i=1:sizeOfMascotData
    
    DataResultSheet1 = [];
    RTVector = [];

    progressbar(i/sizeOfMascotData);
    for j=1:sizeOfMassHunterData
        MatchDiff = MascotDataSorted(i,1) - MassHunterDataSorted(j,2);
        
        AbsMatchDiff = fix ( abs(MatchDiff) / Factor ) * Factor;     % Bug Fixed 202212011650
        
        if(AbsMatchDiff >= OffTargetTolerance)
            continue;
        end
        
        if AbsMatchDiff <= MatchTolerance  %Match
            
            if size(DataResultSheet1,1) == 0
                DataResultSheet1 = [DataResultSheet1; MascotDataSorted(i,1), MatchDiff];
                RTVector = [RTVector; MassHunterDataSorted(j,4)];   %% MIGHT NEEDED IN FUTURE
            else
                DataResultSheet1 = [DataResultSheet1, MatchDiff];
                RTVector = [RTVector, MassHunterDataSorted(j,4)];   %% MIGHT NEEDED IN FUTURE
            end
% % % % % %             UpdatedCSVFileData = [MascotDataSorted(i,1), MascotDataSorted(i,2), MatchDiff, MassHunterDataSorted(j,2), MassHunterDataSorted(j,4), MassHunterDataSorted(j,3)];
% % % % % %             writematrix(UpdatedCSVFileData, ResultsPath + UpdatedCSVFileName, 'WriteMode','append');
        end
    end
    MatchCount = size(DataResultSheet1,1);
    if MatchCount ~= 0
        writematrix(DataResultSheet1, ResultsPath + ResultSheet1, 'WriteMode','append');  % NeedToDel
        writematrix(DataResultSheet1, ResultsPath + Results, 'WriteMode','append');   % Data will be appended into sheet 1


        writematrix([DataResultSheet1; "", RTVector], ResultsPath + ResultSheet4, 'WriteMode','append');  %%Just for Testing

        if (EnableSheet1Transpose)
            NewCellPos = EmptyColPos(ResultsPath+Results, 2);
            writematrix([DataResultSheet1; "", RTVector]', ResultsPath + Results, 'Sheet', 2, 'Range', NewCellPos);
        end

    else
        DataResultSheet3 = [DataResultSheet3; MascotDataSorted(i,1)];
    end
end


%%%Excel File Formatted Results
% DataResultSheet1Prep = DataResultSheet1n2(:,[1,2]);
% writematrix([FormattingHeaderSheet1; DataResultSheet1Prep], ResultsPath + ResultSheet1, 'WriteMode','append');
% FormattingHeaderSheet2 = ["Unique MASCOT (mz)", "Difference (mz)", "MASCOT RT (mins)"];
% DataResultSheet2Prep = DataResultSheet1n2';
% writematrix([FormattingHeaderSheet2', DataResultSheet2Prep], ResultsPath + ResultSheet2, 'WriteMode','append');


if size(DataResultSheet3,1) == 0
    DataResultSheet3 = ["Unmatched MZs not found."];
end
writematrix(["Unique Unmatched MASCOT (mz)"; DataResultSheet3], ResultsPath + ResultSheet3, 'WriteMode','append');  % NeedToDel

if (EnableSheet1Transpose)
    writematrix(["Unique Unmatched MASCOT (mz)"; DataResultSheet3], ResultsPath + Results, 'Sheet', 3, 'Range', 'A1');
else
    writematrix(["Unique Unmatched MASCOT (mz)"; DataResultSheet3], ResultsPath + Results, 'Sheet', 2, 'Range', 'A1');
end
%writematrix([FormattingHeaderSheet2; DataResultSheet1n2], ResultsPath + ResultSheet4, 'WriteMode','append');

toc;


function NewCellPos = EmptyColPos(ExcelFilePath, ExcelSheet)
Matrix = readmatrix(ExcelFilePath,'Sheet',ExcelSheet);
NewColNum = size(Matrix,2) + 1;
NewCellPos = [char(xlsColNum2Str(NewColNum)) , '1'] ;
end



